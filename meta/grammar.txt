%token: int id
%root: Program

Program     : Block
            ;

Block       : ( Expr ';'?)*
            ;

# Expr eats tokens greedily
# earlier appearence, higher precedence
Expr        : ExprItem
            | Expr Expr
            | Expr "$" Expr
            | Expr "." identifier
            | Expr "@" Expr
            | Expr ( "*" | "/" | "%" ) Expr
            | Expr ( "+" | "-" ) Expr
            | Expr ( "<<" | ">>" ) Expr
            | Expr ( ">" | "<" | ">=" | "<=" ) Expr
            | Expr ( "==" | "~=" ) Expr
            | Expr "&" Expr
            | Expr "^" Expr
            | Expr "|" Expr
            | Expr "=" Expr
            ;

# ExprItem also eats tokens greedily
ExprItem    : literal
            | QualifiedIdentifer
            | TableDef
            | "-" ExprItem
            | "~" ExprItem
            | "`" ExprItem
            | BlockInParen
            | If
            | While
            | Return
            | Break
            | Function
            | Lambda
            | OnStackList
            ;

QualifiedIdentifer  : ("!" | "!!")? identifier ("." identifier)*
                    ;

TableDef    : "{" (TableDefItem ","?)* "}"
            ;

TableDefItem    : (("@"? Expr ) | ("." identifier)) ":" Expr
                ;

BlockInParen    : "(" Block ")"
                ;

If          : "if" BlockInParen Expr ( "elif" BlockInParen Expr )* ( "else" Expr )?
            ;

While       : "while" BlockInParen Expr
            ;

Return      : "return" Expr?
            ;

Break       : "break" Expr?
            ;

Function    : "fn" identifier? ParamList? "->"? Expr
            ;

ParamList   : "[" (identifier ("," identifier)*)? "]"
            ;

Lambda      : (ParamList | identifier) "->" expr
            ;

OnStackList : "[" (Expr ","?)* "]"
            ;
