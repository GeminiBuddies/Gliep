%token: identifier
%root: Program

Program     : Block
            ;

Block       : ( Expr ';'?)*
            ;

# Expr eats tokens greedily, so do following symbols
#   - Block
#   - QualifiedIdentifer
#   - If
#   - Return
#   - Break
#   - TableDefItem
# earlier appearence, higher precedence
Expr        : ExprItem
            | Expr ("."| ".!") identifier
            | Expr ("@"| "@!") Expr
            | Expr Expr
            | Expr "$" Expr
            | Expr ".." Expr
            | Expr ( "*" | "/" | "%" ) Expr
            | Expr ( "+" | "-" ) Expr
            | Expr ( "<<" | ">>" ) Expr
            | Expr ( ">" | "<" | ">=" | "<=" ) Expr
            | Expr ( "==" | "~=" ) Expr
            | Expr "&" Expr
            | Expr "^" Expr
            | Expr "|" Expr
            | Expr "&&" Expr
            | Expr "||" Expr
            | Expr "??" Expr
            | Expr "=" Expr
            ;

# ExprItem also eats tokens greedily
ExprItem    : literal
            | ( "-" | "~" | "?" ) ExprItem
            | NamedOperator ExprItem
            | VarRef
            | ( "<|" | "|>" )
            | BlockInParen
            | If
            | While
            | For
            | Break
            | Return
            | Function
            | Lambda
            | OnStackList
            | TableDef
            | VectorDef
            ;

NamedOperator   : "`" identifier
                ;

VarRef      : ( "!" | "!!" )? QualifiedIdentifer
            ;

QualifiedIdentifer  : identifier ("." identifier)*
                    ;

BlockInParen    : "(" Block ")"
                ;

If          : "if" BlockInParen Expr ( "elif" BlockInParen Expr )* ( "else" Expr )?
            ;

While       : "while" ControlFlowLabel? BlockInParen Expr
            ;

ControlFlowLabel    : "'" identifier
                    ;

For         : "for" ControlFlowLabel? "(" identifier ("," identifier)* ":" Expr ")" Expr
            ;

Return      : "return" Expr?
            ;

Break       : "break" ControlFlowLabel? Expr?
            ;

Function    : "fn" identifier? ParamList? "->"? Expr
            ;

ParamList   : "[" ( identifier ( "," identifier )* )? "]"
            ;

Lambda      : ( LambdaParamList | identifier ) "->" expr
            ;

LambdaParamList : "[" ( identifier ("," identifier)* ","? )? "]"
                ;

OnStackList : "[" ( Expr ","? )* "]"
            ;

TableDef    : "{" ( TableDefItem ","? )* "}"
            ;

TableDefItem    : ( ( "@"? Expr ) | ( "." identifier ) ) ":" Expr
                ;
