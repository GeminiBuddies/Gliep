math = require "math.gl";

return !complex = {
    .__add: [a, b] -> complex.new[a.r + b.r, a.i + b.i],
    .__sub: [a, b] -> complex.new[a.r - b.r, a.i - b.i],
    .__mul: [a, b] -> if (math.is_numeric$a) complex.new[a * b.r, a * b.i] 
                      elif (math.is_numeric$b) complex.new[b * a.r, b * a.i] 
                      else complex.new[a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r],
    .__div: [a, b] -> if (math.is_numeric$a) complex.new[a * b.r / (b.r * b.r + b.i * b.i), -a * b.i / (b.r * b.r + b.i * b.i)] 
                      elif (math.is_numeric$b) complex.new[a.r / b, a.i / b] 
                      else complex.new[(a.r * b.r + a.i * b.i) / (b.r * b.r + b.i * b.i), (a.i * b.r - a.r * b.i) / (b.r * b.r + b.i * b.i)],
    .__equ: [a, b] -> a.r == b.r & a.i == b.i,
    .__neg: c -> v2d.new[-c.r, -c.i],

    .__str: c -> format["{0} + {1}i", c.r, c.i],

    .new: [r, i] -> (rv = { .r: r, .i: i }; `rv = complex; rv),
    .mod2: c -> c.r * c.r + c.i * c.i,
    .mod: c -> math.sqrt$complex.mod2$c,
    .conj: c -> complex.new[c.r, -c.i],
}
